//
//  DiscoverViewController.swift
//  BlueChat
//
//  Created by Korisnik on 11/04/2019.
//  Copyright Â© 2019 Josip Rezic. All rights reserved.
//

import UIKit
import CoreBluetooth

class DiscoverViewController: UIViewController {
    
    //
    // MARK: - Variables
    //
    
    private final var centralManager: CBCentralManager?
    private final var peripheralManager: CBPeripheralManager?
    private final var peripherals: [CBPeripheral] = []
    private final var serviceUUID: CBUUID = CBUUID(string: "D391A2A2-894D-4264-8B21-87D33F76B8C8") // generated by uuidgen
    private final let tableView = UITableView()
    
    //
    // MARK: - View methods
    //
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        centralManager = CBCentralManager(delegate: self, queue: .main)
        peripheralManager = CBPeripheralManager(delegate: self, queue: nil)
        
        tableView.frame = view.frame
        view.addSubview(tableView)
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    //
    // MARK: - Methods
    //
    
    private final func startScan() {
        debugPrint("Start scanning...")
        peripherals = []
        centralManager?.scanForPeripherals(withServices: [serviceUUID], options: nil)
    }
}

//
// MARK: - Extension - CBCentralManagerDelegate
//

extension DiscoverViewController: CBCentralManagerDelegate {
    func centralManagerDidUpdateState(_ central: CBCentralManager) {
        debugPrint("centralManagerDidUpdateState:")
        switch central.state {
        case .unknown:
            debugPrint(".unknown")
        case .resetting:
            debugPrint(".resetting")
        case .unsupported:
            debugPrint(".unsupported")
        case .unauthorized:
            debugPrint(".unauthorized")
        case .poweredOff:
            debugPrint(".poweredOff")
        case .poweredOn:
            debugPrint(".poweredOn")
            startScan()
        @unknown default:
            debugPrint(".default")
        }
    }
    
    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {
        debugPrint("didDiscover peripheral: \(peripheral.name)")
        debugPrint("RSSI: \(RSSI.intValue)")
        peripherals.append(peripheral)
        tableView.reloadData()
        if peripheral != nil {
            print("**********************************")
            print("Found new pheripheral devices with services")
            print("Peripheral name: \(String(describing: peripheral.name))")
            print ("Advertisement Data : \(advertisementData)")
            print("ID: \(peripheral.identifier)")
            print("**********************************")
        }
    }
}

//
// MARK: - Extension - CBPeripheralManagerDelegate
//

extension DiscoverViewController: CBPeripheralManagerDelegate {
    func peripheralManagerDidUpdateState(_ peripheral: CBPeripheralManager) {
        debugPrint("peripheralManagerDidUpdateState:")
        switch peripheral.state {
        case .unknown:
            debugPrint("unknown")
        case .resetting:
            debugPrint("resetting")
        case .unsupported:
            debugPrint("unsupported")
        case .unauthorized:
            debugPrint("unauthorized")
        case .poweredOff:
            debugPrint("poweredOff")
        case .poweredOn:
            debugPrint("poweredOn")
            //let advertisementData = String(format: "%@|%d|%d", "userData.name", "userData.avatarId", "userData.colorId")
            peripheralManager?.startAdvertising([CBAdvertisementDataServiceUUIDsKey:[serviceUUID],
                                                CBAdvertisementDataLocalNameKey: "Jopara"])
        @unknown default:
            debugPrint("default")
        }
    }
}

extension DiscoverViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return peripherals.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell()
        cell.textLabel?.text = peripherals[indexPath.row].name ?? "Device"
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
}


